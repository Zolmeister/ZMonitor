{
  "name": "proto",
  "version": "0.1.0",
  "main": "lib/proto.js",
  "readme": "# Proto\n\nThis simple js library adds four functions to Object.prototype.  Since this only modifies global objects and doesn't export any structures, you don't need the return value when calling `require('proto')`.\n\n## Object.prototype\n\nAll functions added to `Object.prototype` are usable from any object in JavaScript.\n\n### Object.prototype.forEach(callback[, thisObject])\n\nThis is the most useful of the additions.  It allows you to forEach over an `Object` instance's local properties and values just like you can already do with `Array` instances.\n\n    require('proto');\n    ({name: \"Tim\", age: 28}).forEach(function (value, key) {\n      console.log(key + \" = \" + JSON.stringify(value));\n    });\n\n### Object.prototype.map(callback[, thisObject])\n\nThis works like forEach, except returns an `Array` instance with the returned values of the function calls.\n\n    require('proto');\n    var pairs = ({name: \"Tim\", age: 28}).map(function (value, key) {\n      return key + \" = \" + value;\n    });\n    // pairs is [\"name = Tim\", \"age = 28\"]\n\n### Object.prototype.new(args...)\n\nCreates a new version of the current object and calls it's `initialize` function if one exists with the same arguments passed to new.\n\n    require('proto');\n    var Rectangle = {\n      initialize: function initialize(width, height) {\n        this.width = width;\n        this.height = height;\n      },\n      get area() {\n        return this.width * this.height;\n      }\n    };\n\n    var rect = Rectangle.new(2, 4);\n    console.log(rect.area);\n\n### Object.prototype.extend(newObject)\n\nSets the current object as the prototype to the passed in object and returns the new passed in object.\n\n    // Assuming the code from above\n    var Square = Rectangle.extend({\n      initialize: function initialize(side) {\n        this.width = side;\n        this.height = side;\n      }\n    });\n    var square = Square.new(15);\n    console.log(square.area);\n\n\n",
  "readmeFilename": "README.markdown",
  "_id": "proto@0.1.0",
  "description": "This simple js library adds four functions to Object.prototype.  Since this only modifies global objects and doesn't export any structures, you don't need the return value when calling `require('proto')`.",
  "dist": {
    "shasum": "cc92bf362083944611e894b5e9b8101cf910d934"
  },
  "_from": "proto"
}
